name: "Device Check"

on:
  push:
    branches:
      - feat/device_check

jobs:
  generate-matrix:
    runs-on: titan

    outputs:
      dynamic-matrix: ${{ steps.generate-matrix.outputs.dynamic-matrix }}
      short-commit: ${{ steps.get-commit.outputs.short_commit }}

    steps:
      - uses: actions/checkout@v4

      - name: Get short commit
        id: get-commit
        run: echo "::set-output name=short_commit::$(git rev-parse --short HEAD)"

      - name: Install dependencies
        run: pip install .

      - name: Generate matrix (mode + device)
        id: generate-matrix
        run: |
          python -c """
          import json
          from alma.conversions.conversion_options import MODEL_CONVERSION_OPTIONS

          # Gather all modes alma source code 
          modes = sorted(set(opt.mode for opt in MODEL_CONVERSION_OPTIONS.values()))
          matrix = {'include': []}

          # We’ll test each mode on both CPU and CUDA
          for mode_str in modes:
              for dev in ['cpu', 'cuda']:
                  matrix['include'].append({'device': dev, 'mode': mode_str})

          print(json.dumps(matrix))
          """ > matrix.json

          echo "::set-output name=dynamic-matrix::$(cat matrix.json)"

  device-check:
    name: "Matrix Device Check"
    needs: [generate-matrix]
    runs-on: titan

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.generate-matrix.outputs['dynamic-matrix']) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install alma package
        run: pip install .

      - name: Run benchmark
        run: |
          echo "Mode: ${{ matrix.mode }}"
          echo "Device: ${{ matrix.device }}"
          
          cd examples/mnist
          CMD="python mem_efficient_benchmark_rand_tensor.py --conversions ${{ matrix.mode }}"
          
          if [ "${{ matrix.device }}" = "cpu" ]; then
            CMD="$CMD --no-cuda --no-mps --no-device-override"
          else
            CMD="$CMD --no-mps --no-device-override"
          fi

          echo "Running: $CMD"
          set +e
          $CMD
          EXIT_CODE=$?
          set -e

          STATUS="✅"
          if [ $EXIT_CODE -ne 0 ]; then
            STATUS="❌"
          fi

          # Write out partial results
          cat <<EOF > partial_results.json
          {
            "mode": "${{ matrix.mode }}",
            "device": "${{ matrix.device }}",
            "status": "$STATUS"
          }
          EOF


      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: "partial-results-${{ needs.generate-matrix.outputs.short-commit }}-${{ matrix.device }}-${{ matrix.mode }}"
          path: examples/mnist/partial_results.json

  combine-results:
    name: "Combine and Display Results"
    runs-on: titan
    needs: device-check

    steps:
      - name: Checkout repo (optional if you need the script from the repo)
        uses: actions/checkout@v4

      - name: Download partial artifacts for this commit
        uses: actions/download-artifact@v4
        with:
          name: "partial-results-${{ needs.generate-matrix.outputs.short-commit }}-*"
          path: all_artifacts

      - name: Merge & Display Results
        run: python .github/scripts/device_check_agg.py

      - name: Upload Final Merged Table
        uses: actions/upload-artifact@v4
        with:
          name: "final-merged-conversion-test-results"
          path: final_results.md

      - name: Print final table
        run: |
          echo "Final Merged Table:"
          cat final_results.md
